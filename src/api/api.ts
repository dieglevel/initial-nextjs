/* tslint:disable */
/* eslint-disable */
/**
 * Hội nhà thơ
 * API documentation for the Hội nhà thơ application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BaseResponseDto
 */
export interface BaseResponseDto {
    /**
     * 
     * @type {string}
     * @memberof BaseResponseDto
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof BaseResponseDto
     */
    'statusCode': number;
    /**
     * 
     * @type {BaseResponseDtoData}
     * @memberof BaseResponseDto
     */
    'data': BaseResponseDtoData;
}
/**
 * @type BaseResponseDtoData
 * @export
 */
export type BaseResponseDtoData = Array<object> | object;

/**
 * 
 * @export
 * @interface CreateDetailInformationDto
 */
export interface CreateDetailInformationDto {
    /**
     * 
     * @type {string}
     * @memberof CreateDetailInformationDto
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDetailInformationDto
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDetailInformationDto
     */
    'avatarUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDetailInformationDto
     */
    'thumbnailUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateDetailInformationDto
     */
    'gender'?: boolean;
}
/**
 * 
 * @export
 * @interface DetailInformationControllerCreate200Response
 */
export interface DetailInformationControllerCreate200Response {
    /**
     * 
     * @type {string}
     * @memberof DetailInformationControllerCreate200Response
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof DetailInformationControllerCreate200Response
     */
    'statusCode': number;
    /**
     * 
     * @type {DetailInformationResponse}
     * @memberof DetailInformationControllerCreate200Response
     */
    'data': DetailInformationResponse;
}
/**
 * 
 * @export
 * @interface DetailInformationControllerFindAll200Response
 */
export interface DetailInformationControllerFindAll200Response {
    /**
     * 
     * @type {string}
     * @memberof DetailInformationControllerFindAll200Response
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof DetailInformationControllerFindAll200Response
     */
    'statusCode': number;
    /**
     * 
     * @type {Array<DetailInformationResponse>}
     * @memberof DetailInformationControllerFindAll200Response
     */
    'data': Array<DetailInformationResponse>;
}
/**
 * 
 * @export
 * @interface DetailInformationResponse
 */
export interface DetailInformationResponse {
    /**
     * 
     * @type {string}
     * @memberof DetailInformationResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DetailInformationResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof DetailInformationResponse
     */
    'updatedAt': string;
    /**
     * 
     * @type {boolean}
     * @memberof DetailInformationResponse
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {string}
     * @memberof DetailInformationResponse
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailInformationResponse
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailInformationResponse
     */
    'avatarUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailInformationResponse
     */
    'thumbnailUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DetailInformationResponse
     */
    'gender'?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateDetailInformationDto
 */
export interface UpdateDetailInformationDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateDetailInformationDto
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDetailInformationDto
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDetailInformationDto
     */
    'avatarUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDetailInformationDto
     */
    'thumbnailUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateDetailInformationDto
     */
    'gender'?: boolean;
}

/**
 * DetailInformationApi - axios parameter creator
 * @export
 */
export const DetailInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateDetailInformationDto} createDetailInformationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailInformationControllerCreate: async (createDetailInformationDto: CreateDetailInformationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDetailInformationDto' is not null or undefined
            assertParamExists('detailInformationControllerCreate', 'createDetailInformationDto', createDetailInformationDto)
            const localVarPath = `/api/detail-information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDetailInformationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailInformationControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/detail-information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailInformationControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('detailInformationControllerFindOne', 'id', id)
            const localVarPath = `/api/detail-information/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailInformationControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('detailInformationControllerRemove', 'id', id)
            const localVarPath = `/api/detail-information/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateDetailInformationDto} updateDetailInformationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailInformationControllerUpdate: async (id: string, updateDetailInformationDto: UpdateDetailInformationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('detailInformationControllerUpdate', 'id', id)
            // verify required parameter 'updateDetailInformationDto' is not null or undefined
            assertParamExists('detailInformationControllerUpdate', 'updateDetailInformationDto', updateDetailInformationDto)
            const localVarPath = `/api/detail-information/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDetailInformationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DetailInformationApi - functional programming interface
 * @export
 */
export const DetailInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DetailInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateDetailInformationDto} createDetailInformationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailInformationControllerCreate(createDetailInformationDto: CreateDetailInformationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailInformationControllerCreate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detailInformationControllerCreate(createDetailInformationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DetailInformationApi.detailInformationControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailInformationControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailInformationControllerFindAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detailInformationControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DetailInformationApi.detailInformationControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailInformationControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailInformationControllerCreate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detailInformationControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DetailInformationApi.detailInformationControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailInformationControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detailInformationControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DetailInformationApi.detailInformationControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateDetailInformationDto} updateDetailInformationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailInformationControllerUpdate(id: string, updateDetailInformationDto: UpdateDetailInformationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailInformationControllerCreate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detailInformationControllerUpdate(id, updateDetailInformationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DetailInformationApi.detailInformationControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DetailInformationApi - factory interface
 * @export
 */
export const DetailInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DetailInformationApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateDetailInformationDto} createDetailInformationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailInformationControllerCreate(createDetailInformationDto: CreateDetailInformationDto, options?: RawAxiosRequestConfig): AxiosPromise<DetailInformationControllerCreate200Response> {
            return localVarFp.detailInformationControllerCreate(createDetailInformationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailInformationControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<DetailInformationControllerFindAll200Response> {
            return localVarFp.detailInformationControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailInformationControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DetailInformationControllerCreate200Response> {
            return localVarFp.detailInformationControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailInformationControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.detailInformationControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateDetailInformationDto} updateDetailInformationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailInformationControllerUpdate(id: string, updateDetailInformationDto: UpdateDetailInformationDto, options?: RawAxiosRequestConfig): AxiosPromise<DetailInformationControllerCreate200Response> {
            return localVarFp.detailInformationControllerUpdate(id, updateDetailInformationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DetailInformationApi - object-oriented interface
 * @export
 * @class DetailInformationApi
 * @extends {BaseAPI}
 */
export class DetailInformationApi extends BaseAPI {
    /**
     * 
     * @param {CreateDetailInformationDto} createDetailInformationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DetailInformationApi
     */
    public detailInformationControllerCreate(createDetailInformationDto: CreateDetailInformationDto, options?: RawAxiosRequestConfig) {
        return DetailInformationApiFp(this.configuration).detailInformationControllerCreate(createDetailInformationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DetailInformationApi
     */
    public detailInformationControllerFindAll(options?: RawAxiosRequestConfig) {
        return DetailInformationApiFp(this.configuration).detailInformationControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DetailInformationApi
     */
    public detailInformationControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return DetailInformationApiFp(this.configuration).detailInformationControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DetailInformationApi
     */
    public detailInformationControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return DetailInformationApiFp(this.configuration).detailInformationControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateDetailInformationDto} updateDetailInformationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DetailInformationApi
     */
    public detailInformationControllerUpdate(id: string, updateDetailInformationDto: UpdateDetailInformationDto, options?: RawAxiosRequestConfig) {
        return DetailInformationApiFp(this.configuration).detailInformationControllerUpdate(id, updateDetailInformationDto, options).then((request) => request(this.axios, this.basePath));
    }
}



