/* tslint:disable */
/* eslint-disable */
/**
 * Hội nhà thơ
 * API documentation for the Hội nhà thơ application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthControllerRegister200Response
 */
export interface AuthControllerRegister200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthControllerRegister200Response
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof AuthControllerRegister200Response
     */
    'statusCode': number;
    /**
     * 
     * @type {CreateAccountResponse}
     * @memberof AuthControllerRegister200Response
     */
    'data': CreateAccountResponse;
}
/**
 * 
 * @export
 * @interface AuthControllerResendOtp200Response
 */
export interface AuthControllerResendOtp200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthControllerResendOtp200Response
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof AuthControllerResendOtp200Response
     */
    'statusCode': number;
    /**
     * 
     * @type {ResendOtpResponse}
     * @memberof AuthControllerResendOtp200Response
     */
    'data': ResendOtpResponse;
}
/**
 * 
 * @export
 * @interface AuthControllerVerifyRegisterOtp200Response
 */
export interface AuthControllerVerifyRegisterOtp200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthControllerVerifyRegisterOtp200Response
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof AuthControllerVerifyRegisterOtp200Response
     */
    'statusCode': number;
    /**
     * 
     * @type {VerifyRegisterOtpResponse}
     * @memberof AuthControllerVerifyRegisterOtp200Response
     */
    'data': VerifyRegisterOtpResponse;
}
/**
 * 
 * @export
 * @interface BadRequestResponse
 */
export interface BadRequestResponse {
    /**
     * 
     * @type {number}
     * @memberof BadRequestResponse
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof BadRequestResponse
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof BadRequestResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface BaseResponse
 */
export interface BaseResponse {
    /**
     * 
     * @type {string}
     * @memberof BaseResponse
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof BaseResponse
     */
    'statusCode': number;
    /**
     * 
     * @type {BaseResponseData}
     * @memberof BaseResponse
     */
    'data': BaseResponseData;
}
/**
 * @type BaseResponseData
 * @export
 */
export type BaseResponseData = Array<object> | object;

/**
 * 
 * @export
 * @interface ConflictResponse
 */
export interface ConflictResponse {
    /**
     * 
     * @type {number}
     * @memberof ConflictResponse
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof ConflictResponse
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof ConflictResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface CreateAccountRequest
 */
export interface CreateAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateAccountRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CreateAccountResponse
 */
export interface CreateAccountResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateAccountResponse
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountResponse
     */
    'updatedAt': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateAccountResponse
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountResponse
     */
    'otpToken': string;
}
/**
 * 
 * @export
 * @interface ResendOtpRequest
 */
export interface ResendOtpRequest {
    /**
     * 
     * @type {string}
     * @memberof ResendOtpRequest
     */
    'identifier': string;
    /**
     * The case for which the OTP is being sent
     * @type {string}
     * @memberof ResendOtpRequest
     */
    'case': ResendOtpRequestCaseEnum;
}

export const ResendOtpRequestCaseEnum = {
    Register: 'register',
    Update: 'update',
    Forget: 'forget'
} as const;

export type ResendOtpRequestCaseEnum = typeof ResendOtpRequestCaseEnum[keyof typeof ResendOtpRequestCaseEnum];

/**
 * 
 * @export
 * @interface ResendOtpResponse
 */
export interface ResendOtpResponse {
    /**
     * 
     * @type {string}
     * @memberof ResendOtpResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface VerifyRegisterOtpRequest
 */
export interface VerifyRegisterOtpRequest {
    /**
     * The OTP code sent to the user\'s email
     * @type {string}
     * @memberof VerifyRegisterOtpRequest
     */
    'otp': string;
}
/**
 * 
 * @export
 * @interface VerifyRegisterOtpResponse
 */
export interface VerifyRegisterOtpResponse {
    /**
     * 
     * @type {boolean}
     * @memberof VerifyRegisterOtpResponse
     */
    'success': boolean;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateAccountRequest} createAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister: async (createAccountRequest: CreateAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAccountRequest' is not null or undefined
            assertParamExists('authControllerRegister', 'createAccountRequest', createAccountRequest)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResendOtpRequest} resendOtpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResendOtp: async (resendOtpRequest: ResendOtpRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resendOtpRequest' is not null or undefined
            assertParamExists('authControllerResendOtp', 'resendOtpRequest', resendOtpRequest)
            const localVarPath = `/api/auth/resend-otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resendOtpRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} otpToken Token for otp verification
         * @param {VerifyRegisterOtpRequest} verifyRegisterOtpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyRegisterOtp: async (otpToken: string, verifyRegisterOtpRequest: VerifyRegisterOtpRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'otpToken' is not null or undefined
            assertParamExists('authControllerVerifyRegisterOtp', 'otpToken', otpToken)
            // verify required parameter 'verifyRegisterOtpRequest' is not null or undefined
            assertParamExists('authControllerVerifyRegisterOtp', 'verifyRegisterOtpRequest', verifyRegisterOtpRequest)
            const localVarPath = `/api/auth/verify-register-otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (otpToken != null) {
                localVarHeaderParameter['OtpToken'] = String(otpToken);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyRegisterOtpRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateAccountRequest} createAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRegister(createAccountRequest: CreateAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerRegister200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRegister(createAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResendOtpRequest} resendOtpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerResendOtp(resendOtpRequest: ResendOtpRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerResendOtp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerResendOtp(resendOtpRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerResendOtp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} otpToken Token for otp verification
         * @param {VerifyRegisterOtpRequest} verifyRegisterOtpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerVerifyRegisterOtp(otpToken: string, verifyRegisterOtpRequest: VerifyRegisterOtpRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerVerifyRegisterOtp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerVerifyRegisterOtp(otpToken, verifyRegisterOtpRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerVerifyRegisterOtp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateAccountRequest} createAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(createAccountRequest: CreateAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerRegister200Response> {
            return localVarFp.authControllerRegister(createAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResendOtpRequest} resendOtpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResendOtp(resendOtpRequest: ResendOtpRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerResendOtp200Response> {
            return localVarFp.authControllerResendOtp(resendOtpRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} otpToken Token for otp verification
         * @param {VerifyRegisterOtpRequest} verifyRegisterOtpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyRegisterOtp(otpToken: string, verifyRegisterOtpRequest: VerifyRegisterOtpRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerVerifyRegisterOtp200Response> {
            return localVarFp.authControllerVerifyRegisterOtp(otpToken, verifyRegisterOtpRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {CreateAccountRequest} createAccountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerRegister(createAccountRequest: CreateAccountRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerRegister(createAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResendOtpRequest} resendOtpRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerResendOtp(resendOtpRequest: ResendOtpRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerResendOtp(resendOtpRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} otpToken Token for otp verification
     * @param {VerifyRegisterOtpRequest} verifyRegisterOtpRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerVerifyRegisterOtp(otpToken: string, verifyRegisterOtpRequest: VerifyRegisterOtpRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerVerifyRegisterOtp(otpToken, verifyRegisterOtpRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



